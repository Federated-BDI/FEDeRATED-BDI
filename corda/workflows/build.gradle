
plugins {
    id 'net.corda.plugins.cordapp' version "$corda_gradle_plugin_version"
    id 'net.corda.plugins.quasar-utils' version "$corda_gradle_plugin_version"
    id 'java'
    id 'kotlin'
    id 'maven-publish'
}

group = 'nl.tno.federated.corda'
version = '0.3.11-SNAPSHOT'

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java

            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }
        }
    }
}


cordapp {
    targetPlatformVersion corda_platform_version
    minimumPlatformVersion corda_platform_version
    workflow {
        name "Template Flows"
        vendor "Corda Open Source"
        licence "Apache License, Version 2.0"
        versionId 4
    }
}

dependencies {
    cordapp project(":contracts")
    cordapp project(":services")

    // Corda dependencies.
    cordaCompile "net.corda:corda-core"
    cordaRuntime "net.corda:corda"

    testImplementation "junit:junit"
    testImplementation "io.mockk:mockk"
    testImplementation "org.testcontainers:testcontainers"
    testImplementation "org.jetbrains.kotlin:kotlin-test"
    testImplementation "net.corda:corda-node-driver"
}

test {
    maxHeapSize = "4096m"
}

jar {
    // This makes the JAR's SHA-256 hash repeatable.
    preserveFileTimestamps = false
    reproducibleFileOrder = true
    // Because the cordapp flattens the jar (fat jar) we need to make sure no duplicate entries end up in the jar.
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    exclude('database.properties')
    exclude('ishare.properties')
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile) {
    kotlinOptions {
        languageVersion = "1.2" // corda 4.9 supports kotlin 1.2.71
        apiVersion = "1.2" // corda 4.9 supports kotlin 1.2.71
        jvmTarget = "1.8"
        javaParameters = true   // Useful for reflection.
    }
}