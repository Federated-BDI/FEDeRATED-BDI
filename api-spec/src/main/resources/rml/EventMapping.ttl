@prefix rml: <http://semweb.mmlab.be/ns/rml#> .
@prefix ql: <http://semweb.mmlab.be/ns/ql#> .
@prefix rr: <http://www.w3.org/ns/r2rml#> .
@prefix ns0: <https://ontology.tno.nl/logistics/federated/Event#> .

[]
  rml:logicalSource [
    rml:source "data.json" ;
    rml:referenceFormulation ql:JSONPath ;
    rml:iterator "$"
  ] ;
  rr:subjectMap [
    rr:termType rr:BlankNode ;
    rr:class ns0:Event
  ] ;
  rr:predicateObjectMap [
    rr:predicate ns0:involvedDigitalTwins ;
    rr:objectMap [
      rr:parentTriplesMap [
        rml:logicalSource [
          rml:source "data.json" ;
          rml:referenceFormulation ql:JSONPath ;
          rml:iterator "$.involvedDigitalTwins"
        ] ;
        rr:subjectMap [
          rr:termType rr:BlankNode ;
          rr:class <https://ontology.tno.nl/logistics/federated/DigitalTwin#Equipment>
        ] ;
        rr:predicateObjectMap [
          rr:predicate <https://ontology.tno.nl/logistics/federated/DigitalTwin#hasSize> ;
          rr:objectMap [
            rr:parentTriplesMap [
                rml:logicalSource [
                    rml:source "data.json" ;
                    rml:referenceFormulation ql:JSONPath ;
                    rml:iterator "$.involvedDigitalTwins.hasSize"
                ] ;
                rr:subjectMap [
                 rr:termType rr:BlankNode ;
                 rr:class <https://ontology.tno.nl/logistics/federated/DigitalTwin#Size>
                ] ;
                rr:predicateObjectMap [
                 rr:predicate <https://ontology.tno.nl/logistics/federated/DigitalTwin#length> ;
                 rr:objectMap [ rml:reference "length" ]
                ], [
                 rr:predicate <https://ontology.tno.nl/logistics/federated/DigitalTwin#width> ;
                 rr:objectMap [ rml:reference "width" ]
                ], [
                 rr:predicate <https://ontology.tno.nl/logistics/federated/DigitalTwin#height> ;
                 rr:objectMap [ rml:reference "height" ]
                ]
                ] ;
                rr:joinCondition [
                         rr:child "." ;
                         rr:parent ".."
                     ]
                ]
          ], [
              rr:predicate <https://ontology.tno.nl/logistics/federated/DigitalTwin#digitalTwinID> ;
              rr:objectMap [ rml:reference "digitalTwinID" ]
          ], [
              rr:predicate <https://ontology.tno.nl/logistics/federated/DigitalTwin#transportEquipmentSizeType> ;
              rr:objectMap [ rml:reference "transportEquipmentSizeType" ]
          ]
      ] ;
      rr:joinCondition [
        rr:child "." ;
        rr:parent ".."
      ]
    ]
  ], [
    rr:predicate ns0:involvedDigitalTwins ;
    rr:objectMap [
      rr:parentTriplesMap [
        rml:logicalSource [
          rml:source "data.json" ;
          rml:referenceFormulation ql:JSONPath ;
          rml:iterator "$.involvedDigitalTwins"
        ] ;
        rr:subjectMap [
          rr:termType rr:BlankNode ;
          rr:class <https://ontology.tno.nl/logistics/federated/DigitalTwin#DangerousGoods>
        ] ;
        rr:predicateObjectMap [
          rr:predicate <https://ontology.tno.nl/logistics/federated/DigitalTwin#dangerousGoodsSupplementaryInformation> ;
          rr:objectMap [ rml:reference "dangerousGoodsSupplementaryInformation" ]
        ], [
          rr:predicate <https://ontology.tno.nl/logistics/federated/DigitalTwin#dangerousGoodsHazardClassificationID> ;
          rr:objectMap [ rml:reference "dangerousGoodsHazardClassificationID" ]
        ], [
          rr:predicate <https://ontology.tno.nl/logistics/federated/DigitalTwin#UNDGCode> ;
          rr:objectMap [ rml:reference "UNDGCode" ]
        ], [
          rr:predicate <https://ontology.tno.nl/logistics/federated/DigitalTwin#grossVolume> ;
          rr:objectMap [ rml:reference "grossVolume" ]
        ], [
          rr:predicate <https://ontology.tno.nl/logistics/federated/DigitalTwin#dangerousGoodsEMSID> ;
          rr:objectMap [ rml:reference "dangerousGoodsEMSID" ]
        ], [
          rr:predicate <https://ontology.tno.nl/logistics/federated/DigitalTwin#dangerousGoodsFlashpointTemperature> ;
          rr:objectMap [ rml:reference "dangerousGoodsFlashpointTemperature" ]
        ], [
          rr:predicate <https://ontology.tno.nl/logistics/federated/DigitalTwin#dangerousGoodsPackagingDangerLevelCode> ;
          rr:objectMap [ rml:reference "dangerousGoodsPackagingDangerLevelCode" ]
        ], [
          rr:predicate <https://ontology.tno.nl/logistics/federated/DigitalTwin#grossMass> ;
          rr:objectMap [ rml:reference "grossMass" ]
        ], [
          rr:predicate <https://ontology.tno.nl/logistics/federated/DigitalTwin#dangerousGoodsProperShippingName> ;
          rr:objectMap [ rml:reference "dangerousGoodsProperShippingName" ]
        ], [
          rr:predicate <https://ontology.tno.nl/logistics/federated/DigitalTwin#dangerousGoodsTechnicalName> ;
          rr:objectMap [ rml:reference "dangerousGoodsTechnicalName" ]
        ], [
          rr:predicate <https://ontology.tno.nl/logistics/federated/DigitalTwin#dangerousGoodsRegulationCode> ;
          rr:objectMap [ rml:reference "dangerousGoodsRegulationCode" ]
        ]
      ] ;
      rr:joinCondition [
        rr:child "." ;
        rr:parent ".."
      ]
    ]
  ], [
    rr:predicate ns0:involvesBusinessIdentifier ;
    rr:objectMap [ rml:reference "involvesBusinessIdentifier" ]
  ], [
    rr:predicate ns0:involvedDigitalTwins ;
    rr:objectMap [
      rr:parentTriplesMap [
        rml:logicalSource [
          rml:source "data.json" ;
          rml:referenceFormulation ql:JSONPath ;
          rml:iterator "$.involvedDigitalTwins"
        ] ;
        rr:subjectMap [
          rr:termType rr:BlankNode ;
          rr:class <https://ontology.tno.nl/logistics/federated/DigitalTwin#Goods>
        ] ;
        rr:predicateObjectMap [
          rr:predicate <https://ontology.tno.nl/logistics/federated/DigitalTwin#goodsTypeCode> ;
          rr:objectMap [ rml:reference "goodsTypeCode" ]
        ], [
          rr:predicate <https://ontology.tno.nl/logistics/federated/DigitalTwin#goodsDescription> ;
          rr:objectMap [ rml:reference "goodsDescription" ]
        ], [
          rr:predicate <https://ontology.tno.nl/logistics/federated/DigitalTwin#grossMass> ;
          rr:objectMap [ rml:reference "grossMass" ]
        ], [
          rr:predicate <https://ontology.tno.nl/logistics/federated/DigitalTwin#netMass> ;
          rr:objectMap [ rml:reference "netMass" ]
        ], [
          rr:predicate <https://ontology.tno.nl/logistics/federated/DigitalTwin#numberOfUnits> ;
          rr:objectMap [ rml:reference "numberOfUnits" ]
        ], [
          rr:predicate <https://ontology.tno.nl/logistics/federated/DigitalTwin#grossVolume> ;
          rr:objectMap [ rml:reference "grossVolume" ]
        ]
      ] ;
      rr:joinCondition [
        rr:child "." ;
        rr:parent ".."
      ]
    ]
  ], [
    rr:predicate ns0:involvedDigitalTwins ;
    rr:objectMap [
      rr:parentTriplesMap [
        rml:logicalSource [
          rml:source "data.json" ;
          rml:referenceFormulation ql:JSONPath ;
          rml:iterator "$.involvedDigitalTwins"
        ] ;
        rr:subjectMap [
          rr:termType rr:BlankNode ;
          rr:class <https://ontology.tno.nl/logistics/federated/DigitalTwin#TransportMeans>
        ] ;
        rr:predicateObjectMap [
          rr:predicate <https://ontology.tno.nl/logistics/federated/DigitalTwin#transportMeansNationality> ;
          rr:objectMap [ rml:reference "transportMeansNationality" ]
        ], [
          rr:predicate <https://ontology.tno.nl/logistics/federated/DigitalTwin#digitalTwinID> ;
          rr:objectMap [ rml:reference "digitalTwinID" ]
        ], [
          rr:predicate <https://ontology.tno.nl/logistics/federated/DigitalTwin#transportMeansMode> ;
          rr:objectMap [ rml:reference "transportMeansMode" ]
        ]
      ] ;
      rr:joinCondition [
        rr:child "." ;
        rr:parent ".."
      ]
    ]
  ], [
    rr:predicate ns0:involvesTimestamp ;
    rr:objectMap [ rml:reference "involvesTimestamp" ]
  ], [
    rr:predicate ns0:involvedActors ;
    rr:objectMap [
      rr:parentTriplesMap [
        rml:logicalSource [
          rml:source "data.json" ;
          rml:referenceFormulation ql:JSONPath ;
          rml:iterator "$.involvedActors"
        ] ;
        rr:subjectMap [
          rr:termType rr:BlankNode ;
          rr:class <https://ontology.tno.nl/logistics/federated/BusinessService#Actor>
        ] ;
        rr:predicateObjectMap [
          rr:predicate <https://ontology.tno.nl/logistics/federated/BusinessService#actorLegalPerson> ;
          rr:objectMap [
            rr:parentTriplesMap [
              rml:logicalSource [
                rml:source "data.json" ;
                rml:referenceFormulation ql:JSONPath ;
                rml:iterator "$.involvedActors.actorLegalPerson"
              ] ;
              rr:subjectMap [
                rr:termType rr:BlankNode ;
                rr:class <https://ontology.tno.nl/logistics/federated/BusinessService#LegalPerson>
              ] ;
              rr:predicateObjectMap [
                rr:predicate <https://ontology.tno.nl/logistics/federated/BusinessService#legalPersonName> ;
                rr:objectMap [ rml:reference "legalPersonName" ]
              ], [
                rr:predicate <https://ontology.tno.nl/logistics/federated/BusinessService#legalPersonID> ;
                rr:objectMap [ rml:reference "legalPersonID" ]
              ], [
                rr:predicate <https://ontology.tno.nl/logistics/federated/BusinessService#legalPersonAddress> ;
                rr:objectMap [
                  rr:parentTriplesMap [
                    rml:logicalSource [
                      rml:source "data.json" ;
                      rml:referenceFormulation ql:JSONPath ;
                      rml:iterator "$.involvedActors.actorLegalPerson.legalPersonAddress"
                    ] ;
                    rr:subjectMap [
                      rr:termType rr:BlankNode ;
                      rr:class <https://ontology.tno.nl/logistics/federated/PhysicalInfrastructure#Property>
                    ] ;
                    rr:predicateObjectMap [
                      rr:predicate <https://ontology.tno.nl/logistics/federated/PhysicalInfrastructure#locatedInCountry> ;
                      rr:objectMap [
                        rr:parentTriplesMap [
                          rml:logicalSource [
                            rml:source "data.json" ;
                            rml:referenceFormulation ql:JSONPath ;
                            rml:iterator "$.involvedActors.actorLegalPerson.legalPersonAddress.locatedInCountry"
                          ] ;
                          rr:subjectMap [
                            rr:termType rr:BlankNode ;
                            rr:class <https://ontology.tno.nl/logistics/federated/PhysicalInfrastructure#Country>
                          ] ;
                          rr:predicateObjectMap [
                            rr:predicate <https://ontology.tno.nl/logistics/federated/PhysicalInfrastructure#countryISOCode> ;
                            rr:objectMap [ rml:reference "countryISOCode" ]
                          ]
                        ] ;
                        rr:joinCondition [
                          rr:child "." ;
                          rr:parent ".."
                        ]
                      ]
                    ], [
                      rr:predicate <https://ontology.tno.nl/logistics/federated/PhysicalInfrastructure#locatedInCity> ;
                      rr:objectMap [
                        rr:parentTriplesMap [
                          rml:logicalSource [
                            rml:source "data.json" ;
                            rml:referenceFormulation ql:JSONPath ;
                            rml:iterator "$.involvedActors.actorLegalPerson.legalPersonAddress.locatedInCity"
                          ] ;
                          rr:subjectMap [
                            rr:termType rr:BlankNode ;
                            rr:class <https://ontology.tno.nl/logistics/federated/PhysicalInfrastructure#City>
                          ] ;
                          rr:predicateObjectMap [
                            rr:predicate <https://ontology.tno.nl/logistics/federated/PhysicalInfrastructure#cityName> ;
                            rr:objectMap [ rml:reference "cityName" ]
                          ]
                        ] ;
                        rr:joinCondition [
                          rr:child "." ;
                          rr:parent ".."
                        ]
                      ]
                    ], [
                      rr:predicate <https://ontology.tno.nl/logistics/federated/PhysicalInfrastructure#postalAddress> ;
                      rr:objectMap [ rml:reference "postalAddress" ]
                    ], [
                      rr:predicate <https://ontology.tno.nl/logistics/federated/PhysicalInfrastructure#locatedAtStreetName> ;
                      rr:objectMap [ rml:reference "locatedAtStreetName" ]
                    ]
                  ] ;
                  rr:joinCondition [
                    rr:child "." ;
                    rr:parent ".."
                  ]
                ]
              ]
            ] ;
            rr:joinCondition [
              rr:child "." ;
              rr:parent ".."
            ]
          ]
        ], [
          rr:predicate <https://ontology.tno.nl/logistics/federated/BusinessService#actorLogisticsRole> ;
          rr:objectMap [ rml:reference "actorLogisticsRole" ]
        ]
      ] ;
      rr:joinCondition [
        rr:child "." ;
        rr:parent ".."
      ]
    ]
], [
    rr:predicate ns0:uniqueIdentifier ;
    rr:objectMap [ rml:reference "uniqueIdentifier" ]
] .
