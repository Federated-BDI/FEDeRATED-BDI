package nl.tno.federated.api.model;

import com.fasterxml.jackson.annotation.JsonProperty;
import io.swagger.v3.oas.annotations.media.Schema;

import javax.annotation.Generated;
import javax.validation.Valid;
import javax.validation.constraints.NotNull;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/**
 * Generated by TNO FEDeRATED
 */

@Schema(name = "LoadEvent", description = "Generated by TNO FEDeRATED")
@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-07-07T09:40:23.742+02:00[Europe/Amsterdam]")
public class LoadEvent {

  @JsonProperty("involvedActors")
  @Valid
  private List<Actor> involvedActors = new ArrayList<>();

  @JsonProperty("transportMeans")
  private TransportMeans transportMeans;

  @JsonProperty("involvedDigitalTwins")
  @Valid
  private List<LoadEventInvolvedDigitalTwinsInner> involvedDigitalTwins = new ArrayList<>();

  public LoadEvent involvedActors(List<Actor> involvedActors) {
    this.involvedActors = involvedActors;
    return this;
  }

  public LoadEvent addInvolvedActorsItem(Actor involvedActorsItem) {
    this.involvedActors.add(involvedActorsItem);
    return this;
  }

  /**
   * Get involvedActors
   * @return involvedActors
  */
  @NotNull @Valid 
  @Schema(name = "involvedActors", required = true)
  public List<Actor> getInvolvedActors() {
    return involvedActors;
  }

  public void setInvolvedActors(List<Actor> involvedActors) {
    this.involvedActors = involvedActors;
  }

  public LoadEvent transportMeans(TransportMeans transportMeans) {
    this.transportMeans = transportMeans;
    return this;
  }

  /**
   * Get transportMeans
   * @return transportMeans
  */
  @NotNull @Valid 
  @Schema(name = "transportMeans", required = true)
  public TransportMeans getTransportMeans() {
    return transportMeans;
  }

  public void setTransportMeans(TransportMeans transportMeans) {
    this.transportMeans = transportMeans;
  }

  public LoadEvent involvedDigitalTwins(List<LoadEventInvolvedDigitalTwinsInner> involvedDigitalTwins) {
    this.involvedDigitalTwins = involvedDigitalTwins;
    return this;
  }

  public LoadEvent addInvolvedDigitalTwinsItem(LoadEventInvolvedDigitalTwinsInner involvedDigitalTwinsItem) {
    this.involvedDigitalTwins.add(involvedDigitalTwinsItem);
    return this;
  }

  /**
   * Get involvedDigitalTwins
   * @return involvedDigitalTwins
  */
  @NotNull @Valid 
  @Schema(name = "involvedDigitalTwins", required = true)
  public List<LoadEventInvolvedDigitalTwinsInner> getInvolvedDigitalTwins() {
    return involvedDigitalTwins;
  }

  public void setInvolvedDigitalTwins(List<LoadEventInvolvedDigitalTwinsInner> involvedDigitalTwins) {
    this.involvedDigitalTwins = involvedDigitalTwins;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LoadEvent loadEvent = (LoadEvent) o;
    return Objects.equals(this.involvedActors, loadEvent.involvedActors) &&
        Objects.equals(this.transportMeans, loadEvent.transportMeans) &&
        Objects.equals(this.involvedDigitalTwins, loadEvent.involvedDigitalTwins);
  }

  @Override
  public int hashCode() {
    return Objects.hash(involvedActors, transportMeans, involvedDigitalTwins);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LoadEvent {\n");
    sb.append("    involvedActors: ").append(toIndentedString(involvedActors)).append("\n");
    sb.append("    transportMeans: ").append(toIndentedString(transportMeans)).append("\n");
    sb.append("    involvedDigitalTwins: ").append(toIndentedString(involvedDigitalTwins)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

