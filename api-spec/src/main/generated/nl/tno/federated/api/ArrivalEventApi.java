/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package nl.tno.federated.api;

import nl.tno.federated.api.model.ArrivalEvent;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-08-22T11:21:14.673+02:00[Europe/Amsterdam]")
@Validated
@Tag(name = "ArrivalEvent", description = "the ArrivalEvent API")
public interface ArrivalEventApi {

    /**
     * POST /ArrivalEvent : Create a resource of type ArrivalEvent.
     * Create a resource of type ArrivalEvent.
     *
     * @param arrivalEvent  (required)
     * @return Successfully created the resource. (status code 200)
     *         or Bad Request (status code 400)
     *         or Unauthorised (status code 401)
     *         or Unsupported Media Type (status code 415)
     */
    @Operation(
        operationId = "arrivalEventPost",
        summary = "Create a resource of type ArrivalEvent.",
        description = "Create a resource of type ArrivalEvent.",
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully created the resource.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ArrivalEvent.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request"),
            @ApiResponse(responseCode = "401", description = "Unauthorised"),
            @ApiResponse(responseCode = "415", description = "Unsupported Media Type")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/ArrivalEvent",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<ArrivalEvent> arrivalEventPost(
        @Parameter(name = "ArrivalEvent", description = "", required = true) @Valid @RequestBody ArrivalEvent arrivalEvent
    );


    /**
     * GET /ArrivalEvent/{resourceId} : Retrieve a resource of type ArrivalEvent by id.
     * Retrieve a resource of type ArrivalEvent by id.
     *
     * @param resourceId  (required)
     * @return Successful operation. (status code 200)
     *         or Bad Request (status code 400)
     *         or Unauthorised (status code 401)
     *         or Resource not found (status code 404)
     *         or Unsupported Media Type (status code 415)
     */
    @Operation(
        operationId = "arrivalEventResourceIdGet",
        summary = "Retrieve a resource of type ArrivalEvent by id.",
        description = "Retrieve a resource of type ArrivalEvent by id.",
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful operation.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = String.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request"),
            @ApiResponse(responseCode = "401", description = "Unauthorised"),
            @ApiResponse(responseCode = "404", description = "Resource not found"),
            @ApiResponse(responseCode = "415", description = "Unsupported Media Type")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/ArrivalEvent/{resourceId}",
        produces = { "application/json" }
    )
    ResponseEntity<String> arrivalEventResourceIdGet(
        @Parameter(name = "resourceId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("resourceId") String resourceId
    );

}
